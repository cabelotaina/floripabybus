data    <- array(rnorm(64),dim=c(2,10))
data
data
data    <- array(rnorm(64),dim=c(10,2))
data
data[1]
data[1:10]
data[2][1:10]
data[1:10][1]
data[1:10][2]
data[1][1:10]
data[1][1]
data[1][2]
data[2]
data[,2]
data[,1]
data[1,1]
data[2,1]
data    <- array(rnorm(64),dim=c(2,10))
data
data[,1]
data    <- array(rnorm(64),dim=c(10,7))
data
data    <- array(rnorm(64),dim=c(10,6))
data    <- array(rnorm(64),dim=c(10,6))
data
data[,1]
data[,5]
data[3,5]
data    <- array(rnorm(64),dim=c(,209))
data    <- array(rnorm(64),dim=c(100,209))
data 
for (i in 100:209){ for (j in 1:100) { data[j,i] = xpathSApply(htmlParse( paste("linha_det.php_",i,".html", sep="") , encoding = "UTF8" ),"//table[4]/tr[*]/td[*]/p/text()")}}
for (i in 100:209){ for (j in 1:100) { data[j,i] = xpathSApply(htmlParse( paste("linha_det.php_",i,".html", sep="") , encoding = "UTF8" ),"//table[4]/tr[*]/td[*]/p/text()")}}
rm(data)
ls()
rm(j)
ls
ls()
rm(i)
ls()
rm(t)
ls()
semana.tabela.ida = scrap("//table[4]")
semana.tabela.ida
help(sapply)
help(xpathApply)
help(xmlinternaldocument)
help(xpathApply)
help(XMLInternalDocument)
??XMLInternalDocument
ls()
semana.tabela.ida
ls()
rm(semana.tabela.ida)
rm(semana.tabela.volta)
ls()
rm(scrap)
source("scrap_bus_list.R")
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ),"//table[4]/tr[*]/td[*]/p/text()")
library(XML)
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ),"//table[4]/tr[*]/td[*]/p/text()")
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ), "//table[4]/tr[*]/td[*]/p/text()")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ), "//table[4]/tr[*]/td[*]/p/text()")
semana.A = scrap_list("//table[4]/tr[*]/td[*]/p/text()")
for ( i in 1:length(semana.A){ if( is.null(semana.A[[i]]){print(i)}}
for ( i in 1:length(semana.A)){ if( is.null(semana.A[[i]]){print(i)}}
for ( i in 1:length(semana.A)){ if( is.null(semana.A[[i]])){print(i)}}
linhas[17]
linhas
library(XML)
linhas
ls()
extensao_ida
library(XML)
extensao_ida
rm(list=ls())
library(XML)
source("scrap_bus_list.R")
source("scrap_bus_fields.R")
linhas = scrap("//td[2]/h1/text()")
linhas = scrap_fields("//td[2]/h1/text()")
linhas
tarifa_cartao = scrap("//div[4]/table[1]/tr[2]/td[2]/text()")
tarifa_cartao = scrap_fields("//div[4]/table[1]/tr[2]/td[2]/text()")
tarifa_dinheiro = scrap("//tr[2]/td[4]/text()")
tarifa_dinheiro = scrap_fields("//tr[2]/td[4]/text()")
tempo_medio_ida = scrap_fields("//tr[3]/td[2]/text()")
tempo_medio_volta = scrap_fields("//tr[3]/td[4]/text()")
extensao_ida = scrap_fields("//tr[4]/td[2]/text()")
extensao_volta = scrap_fields("//tr[4]/td[4]/text()")
notas_da_linha = scrap_fields("//tr[5]/td[2]/text()")
ls()
semana.A = scrap_list("//table[4]/tr[*]/td[*]/p/text()")
for ( i in 1:length(semana.A)){ if( is.null(semana.A[[i]])){print(i)}}
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ),"//table[3]/tbody/tr/td/h1")
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ),"//table[3]/tbody/")
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ),"//table[3]/tbody")
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ),"//table[3]")
linhas
ls()
xpathSApply(htmlParse("linha_det.php_215.html" , encoding = "UTF8" ),"//body")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/tbody/tr/td/h1")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/tbody")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/td")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/tr")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/tr/td")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/tr[1]/td")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/tr[1]/td[1]")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[3]/tr[1]/td[1]/h1/text()")
dia_da_semana.A = scrap_fields("//table[3]/tr[1]/td[1]/h1/text()")
for ( i in 1:length(semana.A)){ if( is.null(semana.A[[i]])){print(i)}}
dia_da_semana.A[17]
dia_da_semana.A[44]
linhas[17]
horarios.B = scrap_list("//table[6]/tr[*]/td[*]/p/text()")
ls()
horarios.A <- semana.A
rm(semana.A)
horarios.A
ls()
dia_da_semana.B = scrap_fields("//table[6]/tr[1]/td[1]/h1/text()")
dia_da_semana.B = scrap_fields("//table[5]/tr[1]/td[1]/h1/text()")
dia_da_semana.B
dia_da_semana.B = scrap_fields("//table[7]/tr[1]/td[1]/h1/text()")
dia_da_semana.B = scrap_fields("//table[5]/tr[1]/td[1]/h1/text()")
dia_da_semana.C = scrap_fields("//table[7]/tr[1]/td[1]/h1/text()")
dia_da_semana.C.legenda = scrap_fields("//table[7]/tr[1]/td[1]/text()")
dia_da_semana.C.legenda
dia_da_semana.C.legenda
horarios.C = scrap_list("//table[8]/tr[*]/td[*]/p/text()")
dia_da_semana.D = scrap_fields("//table[9]/tr[1]/td[1]/h1/text()")
dia_da_semana.D
horarios.D = scrap_list("//table[10]/tr[*]/td[*]/p/text()")
horarios.D
horarios.E = scrap_list("//table[12]/tr[*]/td[*]/p/text()")
dia_da_semana.E = scrap_fields("//table[11]/tr[1]/td[1]/h1/text()")
dia_da_semana.F = scrap_fields("//table[13]/tr[1]/td[1]/h1/text()")
horarios.F = scrap_list("//table[14]/tr[*]/td[*]/p/text()")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"/html/body/div[2]/div/div[4]/table[17]/tbody/tr/td/table/tbody/tr/td/h1")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[17]/tbody/tr/td/table/tbody/tr/td/h1")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[17]/tbody/tr/td/table[1]/tbody/tr/td/h1")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[17]/tbody/tr/td/table[1]")
xpathSApply(htmlParse("linha_det.php_209.html" , encoding = "UTF8" ),"//table[17]/")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tr/td")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tbody/tr/td/table[1]")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tbody/tr/td/")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tr/td/")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tr/td")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tbody/tr/td")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tr/td/table[1]")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tr/td/table[1]/td/text()")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[17]/tr/td/table[1]/tr/td/text()")
itinerario.ida = scrap_list("//table[17]/tr/td/table[1]/tr/td/text()")
itinerario.volta = scrap_list("//table[17]/tr/td/table[2]/tr/td/text()")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[18]/tr/td/text()")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[18]/tr/td/text()")
xpathSApply(htmlParse("linha_det.php_207.html" , encoding = "UTF8" ),"//table[18]/tr/td/text()")
xpathSApply(htmlParse("linha_det.php_207.html" , encoding = "UTF8" ),"//table[18]/")
xpathSApply(htmlParse("linha_det.php_207.html" , encoding = "UTF8" ),"//table[18]")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[18]")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[18]/tr")
xpathSApply(htmlParse("linha_det.php_200.html" , encoding = "UTF8" ),"//table[18]/tr/td")
xpathSApply(htmlParse("linha_det.php_004.html" , encoding = "UTF8" ),"//table[18]/tr/td")
xpathSApply(htmlParse("linha_det.php_004.html" , encoding = "UTF8" ),"//table[18]/tr/td/text()")
ls()
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td/b/text()")
library(XML)
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td/b/text()")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td/text()")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td/")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td/text")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td/text()")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td/")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td")
history
history()
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td")
xpathSApply(htmlParse("linha_det.php_005.html" , encoding = "UTF8" ),"//table[6]/tr/td"):q
ls()
total[1]
total = cbind(linhas,tarifa_cartao,tarifa_dinheiro)
total
total[1:10,1:3]
total[,1:3]
total[1,1:3]
library(XML)
total[1,1:3]
rm(list = ls())
ls()
source("start.R")
total
total[1,]
ls()
source("start.R")
source("start.R")
total
total[,1]
total[1,]
total[1,]$linhas
total[1,][1]
total[1,][2]
total[1,][3]
total[1,][4]
total[1,][5]
total[1,][6]
total[1,][7]
total[1,][8]
total[1,][9]
total[1,][0]
teste = total[1,][0]
teste
teste = total[1,]
teste
type_of(teste)
typeof(teste)
lapply(teste, write, "test.txt", append=TRUE, ncolumns=1000)
total[[1]]
total[[1]][[1]]
total[[1]][1]
total[[1]]
total[[2]]
total[[3]]
teste = total[[1]]
typeof(teste)
teste
teste = total[[1,1]]
total[[1,1]]
total[[1,2]]
total[[1,3]]
total[[1,4]]
total[[1,1:8]]
total[[1,1]]
teste = total[[1,1]]
teste
teste = total[[1]]
teste
teste[1]
teste[,1]
teste
typeof(teste)
str(teste)
print.XMLInternalDocument 
as(teste, "character")
x = as(teste, "character")
typeof(x)
lapply(total, as.character)
help(sapply)
sapply(total, as(x, "character"))
sapply(total, function(x) as(x, "character"))
teste = sapply(total, function(x) as(x, "character"))
teste
dim(teste)
teste
total[[1]]
total[[2]]
total[[1]]
total[[1,*]]
total[[1,1:]]
total[[1,1:8]]
total[[1,1:7]]
total[[1,7]]
total[[1,2]]
typeof(total[[1,2]])
sapply(total[[1]], function(x) as(x,"character")
)
sapply(total[[1]], function(x) as(x,"character"))
teste = sapply(total, function(x) as(x, "character"))
teste = sapply(total[[1]], function(x) as(x, "character"))
teste = sapply(total[1], function(x) as(x, "character"))
teste
teste[2]
teste[1]
teste[1,]
typeof(teste)
length(teste)
teste = sapply(total[1,1:8], function(x) as(x, "character"))
teste
typeof(teste)
teste$linhas
teste$[1]
teste[1]
teste[2]
teste[4]
length(teste)
lapply(teste, write, "test.txt", append=TRUE, ncolumns=1000)
lapply(teste, write, "test.txt")
write(teste, "output.txt", sep="\n")
length(teste)
teste[1]
help(regexpr)
regexpr ( [1-9], teste[1]
regexpr ( [1-9], teste[1])
regexpr ( "[1-9]" , teste[1])
regexpr ( "[1-9][1-9][1-9]" , teste[1])
regexpr ( "[:digit:]" , teste[1])
regexpr ( "[:digit:][:digit:][:digit:]" , teste[1])
regexpr ( "[:digit:][:digit:][:digit:]" , teste)
regexpr ( "[:digit:][:digit:][:digit:]" , teste[1])
grep("[a-z]", letters)
grep("[a-z]", teste)
grep("[a-z]", teste[1])
grep("[1-9]", teste[1])
regex("[1-9]", teste[1])
regexpr("[1-9]", teste[1])
teste
teste[1]
"849" %in% teste[1]
pmatch("m",   c("mean", "median", "mode")) # returns NA
pmatch("med", c("mean", "median", "mode")) # returns 2
pmatch("849", total)
pmatch("849", teste)
pmatch("849", teste[1])
pmatch("849", teste)
teste
txt <- c("The", "licenses", "for", "most", "software", "are",
  "designed", "to", "take", "away", "your", "freedom",
  "to", "share", "and", "change", "it.",
   "", "By", "contrast,", "the", "GNU", "General", "Public", "License",
   "is", "intended", "to", "guarantee", "your", "freedom", "to",
   "share", "and", "change", "free", "software", "--",
   "to", "make", "sure", "the", "software", "is",
   "free", "for", "all", "its", "users")
regexpr("en", txt)
regexpr("[1-9]", teste)
teste[8]
regexpr("[1-9]", teste[1])
x <- "http://stat.umn.edu:80/xyz"
m <- regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x)
m
length(m)
typeof(m)
m
regmatches(x, m)
regexec("[1-9][1-9][1-9]", total[1]
)
regexec("[1-9][1-9][1-9]", total[1])
regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x)
regexec("[1-9]:[1-9]:[1-9]", total[1])
regexec("[1-9][1-9][1-9]", total[1])
total
regexec("[1-9][1-9][1-9]", teste[1])
m = regexec("[1-9][1-9][1-9]", total[1])
m = regexec("[1-9][1-9][1-9]", teste[1])
regmatches(teste[1],m)
total[,1]
sapply(total[,1], function(x) m = regexec("[1-9][1-9][1-9]", x) regmatches(x,m))
total[,1]
numeros = total[,1]
numeros
numeros[1]
numeros[[1]]
numeros = sapply(numeros, function(x) as(x, "character"))
numeros
sapply(numeros, function(x) m = regexec("[1-9][1-9][1-9]", x) regmatches(x,m))
sapply(numeros, function(x) {m = regexec("[1-9][1-9][1-9]", x) regmatches(x,m)})
sapply(numeros, function(x) {m = regexec("[1-9][1-9][1-9]", x); regmatches(x,m)})
write(sapply(numeros, function(x) {m = regexec("[1-9][1-9][1-9]", x); regmatches(x,m)}), "numeros.txt", sep"\n")
var = 
var = sapply(numeros, function(x) {m = regexec("[1-9][1-9][1-9]", x); regmatches(x,m)})
var
write(var, "numeros.txt", sep"\n")
length(var)
var[1]
typeof(var)
var = as(var,"character")
var
var-original = sapply(numeros, function(x) {m = regexec("[1-9][1-9][1-9]", x); regmatches(x,m)})
varOriginal = sapply(numeros, function(x) {m = regexec("[1-9][1-9][1-9]", x); regmatches(x,m)})
varOriginal [181]
var
var
source("start.R")
numeros = sapply(total[,1}, function(x) as(x, "character"))
numeros = sapply(total[,1], function(x) as(x, "character"))
numeros = sapply(numeros, function(x) {m = regexec("[1-9][1-9][1-9]", x); regmatches(x,m)})
numer
numeros
 m = regexec("[1-9][1-9][1-9]", total[[1,1])
total[1][2]
total[1][1]
total[1]
total[[1]]
regexec("[1-9][1-9][1-9]", total[[1])
regexec("[1-9][1-9][1-9]", total[1])
regexec("[1-9][1-9][1-9]", total[[1]])
totak
total
regexec("[1-9][1-9][1-9]", as(total[[1]],"character"))
regmatches(regexec("[1-9][1-9][1-9]", as(total[[1]],"character"))
)
regmatches(as(total[[1]],"character"),regexec("[1-9][1-9][1-9]", as(total[[1]],"character"))
)
regmatches(as(total[[1]],"character"),regexec("[1-9][1-9][1-9]", as(total[[1]],"character")))
regmatches(as(total[[2]],"character"),regexec("[1-9][1-9][1-9]", as(total[[1]],"character")))
gsub("^.", "", linhas)
gsub("^.", "", as(linhas,"character")
)
linha
linhas
sapply( linhas, function(x) gsub("^.", "", as(x,"character")))
linhas[192]
linhas_charsapply( linhas, function(x) gsub("^.", "", as(x,"character")))
linhas_char=sapply( linhas, function(x) gsub("^.", "", as(x,"character")))
linhas_char
linhas_char=sapply( linhas_char, function(x) gsub("$.", "", x))
linhas_char
linhas_char=sapply( linhas, function(x) gsub("^.", "", as(x,"character")))
linhas_char=sapply( linhas_char, function(x) gsub(".$", "", as(x,"character")))
linhas_char
sapply(linhas_char, function(x) {m = regexec("[1-9][1-9][1-9]", x); regmatches(x,m)})
linhas[150]
sapply(linhas_char, function(x) {m = regexec("[0-9][0-9][0-9]", x); regmatches(x,m)})
sapply(linhas_char, function(x) {m = regexec("[0-9][0-9][0-9]|[0-9][0-9]", x); regmatches(x,m)})
numeros = sapply(linhas_char, function(x) {m = regexec("[0-9][0-9][0-9]|[0-9][0-9]", x); regmatches(x,m)})
numeros
dia_da_semana.A
horarios.A
horarios.A[,1]
horarios.A[1]
horarios.A[1,]
horarios.A
length(horarios.A)
1:length(horarios.A)
for ( i in 1:length(horarios.A) print("ola!")
for ( i in 1:length(horarios.A)) print("ola!")
length(horarios.A[[1]])
length(horarios.A[1])
length(horarios.A[1:])
length(horarios.A[1:*])
length(horarios.A)
length(horarios.A[1])
length(horarios.A[[1]])
length(horarios.A[[1]][1])
length(horarios.A[[1]][[1]])
horarios.A[[1]][[1]]
horarios.A[[1]][1]
horarios.A[1][1]
horarios.A[1]
horarios.A[2]
length(horarios.A[2])
length(horarios.A[[2]])
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) > x ) x = length(horarios.A[[i]])w
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) > x ) x = length(horarios.A[[i]])
x
i
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) > x ) {x = length(horarios.A[[i]]); print(i)}
numeros[28]
horarios.A[28]
horarios.A[28]
numeros[28]
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) < 100 ) x = length(horarios.A[[i]])
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) <100 ) {x = length(horarios.A[[i]]); print(i)}
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) >100 ) {x = length(horarios.A[[i]]); print(i)}
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) >90 ) {x = length(horarios.A[[i]]); print(i)}
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) >400 ) {x = length(horarios.A[[i]]); print(i)}
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) >40 ) {x = length(horarios.A[[i]]); print(i)}
x = 0 ; for ( i in 1:length(horarios.A)) if  (length(horarios.A[[i]]) >70 ) {x = length(horarios.A[[i]]); print(i)}
numeros[28,26]
numeros[28]
numeros[36]
numeros[37]
numeros[155]
numeros[195]
x = 0 ; for ( i in 1:length(horarios.B)) if  (length(horarios.B[[i]]) >70 ) {x = length(horarios.A[[i]]); print(i)}
x = 0 ; for ( i in 1:length(horarios.B)) if  (length(horarios.B[[i]]) >100 ) {x = length(horarios.A[[i]]); print(i)}
numeros[3]
numeros[62]
numeros[208]
scrap_list("//table[4]/tr[*]/td[*]/text()")
source("start.R")
linhas[1]
help(cat)
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
cat(paste(":linha => ",linhas,":tarifa => ",tarifa_cartao))
cat(paste(":linha => ",linhas_char,":tarifa => "))
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
cat(paste(":linha => ",linhas_char,":tarifa => "),label = 1:209)
cat(paste(":linha => ",linhas_char,":tarifa => "),label = paste0(1:209))
cat(paste(letters, 100* 1:26), fill = TRUE, labels = paste0("{", 1:10, "}:"))
cat(paste(":linha => ",linhas_char,":tarifa => "),labels = paste0(1:209))
cat(paste(":linha => ",linhas_char,":tarifa => "),labels = 1:209)
cat(paste(":linha => ",linhas_char,":tarifa => "),labels = paste0(1:209))
cat(paste(":linha => ",linhas_char,":tarifa => "), fill=T,labels = paste0(1:209))
cat(paste(":linha => ",linhas_char,":tarifa => "), fill=T,labels = paste0(""))
cat(paste("Bus(:linha => ",linhas_char,":tarifa => "), fill=T,labels = paste0(""))
cat(paste("Bus(:linha => \"",linhas_char,":tarifa => "), fill=T,labels = paste0(""))
cat(paste("Bus(:linha => \"",linhas_char,":tarifa => "), fill=T,labels = paste0(""))
cat(paste("Bus(:linha => \"",linhas_char,":tarifa => ",")"), fill=T,labels = paste0(""))
cat(paste("Bus(:linha => \"",linhas_char,":tarifa_cartao => ",sapply(tarifa_cartao, function(x) as(x,"character")),")"), fill=T,labels = paste0(""))
write(cat(paste("Bus(:linha => \"",linhas_char,":tarifa_cartao => ",sapply(tarifa_cartao, function(x) as(x,"character")),")"), fill=T,labels = paste0("")),"model_bus.rb")
bus = cat(paste("Bus(:linha => \"",linhas_char,":tarifa_cartao => ",sapply(tarifa_cartao, function(x) as(x,"character")),")"), fill=T,labels = paste0(""))
sink("bus
cat(paste("Bus(:linha => \"",linhas_char,":tarifa_cartao => ",sapply(tarifa_cartao, function(x) as(x,"character")),")","\n"), fill=T,labels = paste0(""))
cat(paste("Bus(:linha => \"",linhas_char,":tarifa_cartao => ",sapply(tarifa_cartao, function(x) as(x,"character")),")"), fill=T,labels = paste0(""))
sink("bus_model.rb
)
cat(paste("Bus(:linha => \"",linhas_char,":tarifa_cartao => ",sapply(tarifa_cartao, function(x) as(x,"character")),")"), fill=T,labels = paste0(""))
sink("bus_model.rb")
cat(paste("Bus(:linha => \"",linhas_char,":tarifa_cartao => ",sapply(tarifa_cartao, function(x) as(x,"character")),")"), fill=T,labels = paste0(""))
sink()
cat(paste("Bus(:linha => \'",linhas_char,"\'",":tarifa_cartao => ","\'",sapply(tarifa_cartao, function(x) as(x,"character")),"\'",")"), fill=T,labels = paste0(""))
sink("bus_model.rb")
cat(paste("Bus(:linha => \'",linhas_char,"\'",":tarifa_cartao => ","\'",sapply(tarifa_cartao, function(x) as(x,"character")),"\'",")"), fill=T,labels = paste0(""))
sink()
